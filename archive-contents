(1
 (a . [(0 1 1) ((emacs (25))) "Associative data structure functions" tar])
 (ac-js2 . [(20190101 933) ((js2-mode (20090723)) (skewer-mode (1 4))) "Automode, with navigation" tar])
 (ag . [(0 47) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." tar])
 (ansible . [(0 2 0) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar])
 (ansible-doc . [(0 4) ((emacs (24 3))) "Ansible documentation Minor Mode" tar])
 (async . [(1 9 3) nil "Asynchronous processing in Emacs" tar])
 (auctex . [(12 1 2) ((emacs (24 1)) (cl-lib (0 5))) "Integrated environment for *TeX*" tar])
 (auctex-latexmk . [(1 0 2) ((auctex (11 87))) "Add LatexMk support to AUCTeX" tar])
 (bind-key . [(2 4) nil "A simple way to manage personal keybindings" tar])
 (cider . [(0 22 1) ((emacs (25)) (clojure-mode (5 9)) (parseedn (0 1)) (pkg-info (0 4)) (queue (0 2)) (spinner (1 7)) (seq (2 16)) (sesman (0 3 2))) "Clojure Interactive Development Environment that Rocks" tar])
 (clang-format . [(20180406 1514) ((cl-lib (0 3))) "Format code using clang-format" tar])
 (clj-refactor . [(2 4 0) ((emacs (25 1)) (s (1 8 0)) (seq (2 19)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 6 1)) (cider (0 17 0)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of commands for refactoring Clojure code" tar])
 (clojure-mode . [(5 11 0) ((emacs (25 1))) "Major mode for Clojure code" tar])
 (cmake-font-lock . [(20190728 1901) ((cmake-mode (0 0))) "Advanced, type aware, highlight support for CMake" tar])
 (cmake-mode . [(3 15 3) nil "major-mode for editing CMake sources" tar])
 (color-identifiers-mode . [(1 0 0) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" tar])
 (color-theme-sanityinc-tomorrow . [(1 17) nil "A version of Chris Kempson's various Tomorrow themes" tar])
 (column-enforce-mode . [(20171030 1900) nil "Highlight text that extends beyond a  column" tar])
 (company . [(0 9 10) ((emacs (24 3))) "Modular text completion framework" tar])
 (company-lsp . [(2 1 0) ((emacs (25 1)) (lsp-mode (6 0)) (company (0 9 0)) (s (1 2 0)) (dash (2 11 0))) "Company completion backend for lsp-mode." tar])
 (company-quickhelp . [(2 3 0) ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" tar])
 (company-reftex . [(20181222 906) ((emacs (25 1)) (s (1 12)) (company (0 8))) "Company backend based on RefTeX." tar])
 (cquery . [(20190118 542) ((emacs (25 1)) (lsp-mode (3 4)) (dash (0 13))) "cquery client for lsp-mode" tar])
 (csv-mode . [(1 9) ((emacs (24 1)) (cl-lib (0 5))) "Major mode for editing comma/char separated values" tar])
 (dash . [(2 16 0) nil "A modern list library for Emacs" tar])
 (dash-functional . [(2 16 0) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" tar])
 (debpaste . [(0 1 5) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" tar])
 (diminish . [(0 45) nil "Diminished modes are minor modes with no modeline display" tar])
 (discover-my-major . [(1 0) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" tar])
 (editorconfig . [(0 8 1) ((cl-lib (0 5)) (emacs (24))) "EditorConfig Emacs Plugin" tar])
 (edn . [(1 1 2) ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) "Support for reading and writing the edn data format from elisp" tar])
 (elisp-slime-nav . [(0 9) ((cl-lib (0 2))) "Make M, work in elisp like they do in slime" tar])
 (elpa-mirror . [(20210210 339) ((emacs (25 1))) "Create local package repository from installed packages" tar])
 (elpy . [(1 34 0) ((company (0 9 2)) (emacs (24 4)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar])
 (emmet-mode . [(1 0 8) nil "Unofficial Emmet's support for emacs" tar])
 (emr . [(0 4) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (paredit (24 0 0)) (projectile (0 9 1)) (clang-format (0)) (iedit (0 97))) "Emacs refactoring system." tar])
 (epl . [(0 9) ((cl-lib (0 3))) "Emacs Package Library" tar])
 (ess . [(18 10 2) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar])
 (evil . [(1 2 14) ((emacs (24 1)) (undo-tree (0 6 3)) (goto-chg (1 6)) (cl-lib (0 5))) "Extensible Vi layer for Emacs." tar])
 (evil-exchange . [(20170511 259) ((evil (1 2 8)) (cl-lib (0 3))) "Exchange text more easily within Evil" tar])
 (evil-nerd-commenter . [(3 3 8) ((emacs (24 4))) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar])
 (evil-numbers . [(0 4) nil "increment/decrement numbers like in vim" tar])
 (evil-visualstar . [(0 2 0) ((evil (0))) "Starts a * or # search from the visual selection" tar])
 (f . [(0 20 0) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" tar])
 (flx . [(0 6 1) ((cl-lib (0 3))) "fuzzy matching with good sorting" tar])
 (flx-ido . [(0 6 1) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" tar])
 (flycheck . [(31) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "Onfly syntax checking" tar])
 (flycheck-haskell . [(0 8) ((emacs (24 3)) (flycheck (0 25)) (haskell-mode (13 7)) (dash (2 4 0)) (seq (1 11)) (let-alist (1 0 1))) "Flycheck: Automatic Haskell configuration" tar])
 (flycheck-pos-tip . [(0 3) ((emacs (24 1)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" tar])
 (gh . [(0 10 0) ((emacs (24 4)) (pcache (0 3 1)) (logito (0 1))) "A GitHub library for Emacs" tar])
 (ghub . [(3 2 0) ((emacs (25 1)) (dash (2 14 1)) (graphql (0 1 1)) (let-alist (1 0 5)) (treepy (0 1 1))) "Minuscule client libraries for Git forge APIs." tar])
 (gist . [(1 4 0) ((emacs (24 1)) (gh (0 10 0))) "Emacs integration for gist.github.com" tar])
 (git-commit . [(2 90 1) ((emacs (25 1)) (dash (2 14 1)) (with-editor (2 8 0))) "Edit Git commit messages" tar])
 (goto-chg . [(1 7 3) nil "goto last change" tar])
 (graphql . [(0 1 1) ((emacs (25))) "GraphQL utilities" tar])
 (haskell-mode . [(16 1) ((emacs (24 3))) "A Haskell editing mode" tar])
 (haskell-snippets . [(0 1 0) ((yasnippet (0 8 0))) "Yasnippets for Haskell" tar])
 (helm . [(3 3) ((emacs (24 4)) (async (1 9 3)) (popup (0 5 3)) (helm-core (3 0))) "Helm is an Emacs incremental and narrowing framework" tar])
 (helm-core . [(3 3) ((emacs (24 4)) (async (1 9 3))) "Development files for Helm" tar])
 (highlight-defined . [(0 1 5) ((emacs (24))) "Syntax highlighting of known Elisp symbols" tar])
 (highlight-indentation . [(0 7 0) nil "Minor modes for highlighting indentation" tar])
 (ht . [(2 2) ((dash (2 12 0))) "The missing hash table library for Emacs" tar])
 (htmlize . [(1 54) nil "Convert buffer text and decorations to HTML." tar])
 (hungry-delete . [(1 1 5) nil "hungry delete minor mode" tar])
 (hydra . [(0 14 0) ((cl-lib (0 5))) "Make bindings that stick around." tar])
 (ido-completing-read+ . [(4 13) ((emacs (24 4)) (cl-lib (0 5)) (s (0 1)) (memoize (1 1))) "A completingfunction using ido" tar])
 (ido-sort-mtime . [(20171121 859) nil "Sort Ido's file list by modification time" tar])
 (ido-vertical-mode . [(0 1 6) nil "Makes ido-mode display vertically." tar])
 (iedit . [(20190419 803) nil "Edit multiple regions in the same way simultaneously." tar])
 (impatient-mode . [(1 1) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar])
 (indent-guide . [(20160630) nil "show vertical lines to guide indentation" tar])
 (inflections . [(2 5) ((cl-lib (0 5)) (emacs (24))) "convert english words between singular and plural" tar])
 (isend-mode . [(20190201 832) nil "Interactively send parts of an Emacs buffer to an interpreter" tar])
 (js2-mode . [(20190219) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar])
 (js2-refactor . [(0 9 0) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar])
 (julia-mode . [(20190813 1326) nil "Major mode for editing Julia source code" tar])
 (list-utils . [(0 4 4) nil "List-manipulation utility functions" tar])
 (logito . [(0 1) ((eieio (1 3))) "logging library for Emacs" tar])
 (lsp-mode . [(6 1) ((emacs (25 1)) (dash (2 14 1)) (dash-functional (2 14 1)) (f (0 20 0)) (ht (2 0)) (spinner (1 7 3)) (markdown-mode (2 3))) "LSP mode" tar])
 (lsp-ui . [(6 0) ((emacs (25 1)) (dash (2 14)) (dash-functional (1 2 0)) (lsp-mode (6 0)) (markdown-mode (2 3))) "UI modules for lsp-mode" tar])
 (magit . [(2 90 1) ((emacs (25 1)) (async (1 9 3)) (dash (2 14 1)) (ghub (3 0 0)) (git-commit (2 90 0)) (magit-popup (2 12 4)) (with-editor (2 8 0))) "A Git porcelain inside Emacs." tar])
 (magit-popup . [(2 13 0) ((emacs (24 4)) (async (1 9 2)) (dash (2 13 0))) "Define prefixsuffix command combos" tar])
 (makey . [(0 3) ((cl-lib (0 2))) "interactive commandline mode" tar])
 (markdown-mode . [(2 3) ((emacs (24)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" tar])
 (memoize . [(1 1) nil "Memoization functions" tar])
 (multiple-cursors . [(1 4 0) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar])
 (org-download . [(0 1 0) ((async (1 2))) "Image dragmode" tar])
 (page-break-lines . [(0 11) nil "Display ugly ^L page breaks as tidy horizontal lines" tar])
 (paredit . [(24) nil "minor mode for editing parentheses" tar])
 (parseclj . [(0 1 0) ((emacs (25)) (a (0 1 0 -3 4))) "Clojure/EDN parser" tar])
 (parseedn . [(0 1 0) ((emacs (25)) (a (0 1 0 -3 4)) (parseclj (0 1 0))) "Clojure/EDN parser" tar])
 (pcache . [(0 4 2) ((eieio (1 3))) "persistent caching for Emacs." tar])
 (peg . [(1 0) ((emacs (25))) "Parsing Expression Grammars in Emacs Lisp" tar])
 (pkg-info . [(0 6) ((epl (0 8))) "Information about packages" tar])
 (popup . [(0 5 3) ((cl-lib (0 3))) "Visual Popup User Interface" tar])
 (pos-tip . [(0 4 6) nil "Show tooltip at point" tar])
 (projectile . [(2 0 0) ((emacs (25 1)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" tar])
 (puppet-mode . [(0 3) ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) "Major mode for Puppet manifests" tar])
 (pyvenv . [(1 20) nil "Python virtual environment interface" tar])
 (queue . [(0 2) nil "Queue data structure" tar])
 (s . [(1 12 0) nil "The long lost Emacs string manipulation library." tar])
 (sesman . [(0 3 4) ((emacs (25))) "Generic Session Manager" tar])
 (simple-httpd . [(1 5 1) ((cl-lib (0 3))) "pure elisp HTTP server" tar])
 (skewer-mode . [(1 8 0) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar])
 (smart-tabs-mode . [(1 0) nil "Intelligently indent with tabs, align with spaces!" tar])
 (smartparens . [(1 11 0) ((dash (2 13 0)) (cl-lib (0 3))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar])
 (smex . [(3 0) nil "Mstyle fuzzy matching." tar])
 (spinner . [(1 7 3) nil "Add spinners and progressline for ongoing operations" tar])
 (sync-recentf . [(20160326 2001) nil "Synchronize the recent files list between Emacs instances" tar])
 (treepy . [(0 1 1) ((emacs (25 1))) "Generic tree traversal tools" tar])
 (undo-tree . [(0 6 5) nil "Treat undo history as a tree" tar])
 (use-package . [(2 4) ((emacs (24 3)) (bind-key (2 4))) "A configuration macro for simplifying your .emacs" tar])
 (vimrc-mode . [(20181116 1919) nil "Major mode for vimrc files" tar])
 (web-mode . [(16) ((emacs (23 1))) "major mode for editing web templates" tar])
 (wgrep . [(2 3 0) nil "Writable grep buffer and apply the changes to files" tar])
 (wgrep-ag . [(2 3 0) ((wgrep (2 1 5))) "Writable ag buffer and apply the changes to files" tar])
 (which-key . [(3 3 0) ((emacs (24 4))) "Display available keybindings in popup" tar])
 (with-editor . [(2 8 3) ((emacs (24 4)) (async (1 9))) "Use the Emacsclient as $EDITOR" tar])
 (ws-butler . [(0 6) nil "Unobtrusively remove trailing whitespace." tar])
 (xml-rpc . [(1 6 12) nil "An elisp implementation of clientside XML-RPC" tar])
 (yaml-mode . [(0 0 14) ((emacs (24 1))) "Major mode for editing YAML files" tar])
 (yasnippet . [(0 13 0) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." tar])
 (ztree . [(1 0 5) ((cl-lib (0))) "Text mode directory tree" tar])
)